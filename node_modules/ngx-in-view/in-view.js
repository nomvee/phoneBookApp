var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Directive, Output, EventEmitter, ChangeDetectorRef, ElementRef, Optional } from '@angular/core';
import { uniqueId } from './util';
import { InViewConfigurable } from './config/config';
import { InViewConfig } from './config/config';
import { Enter, Exit, EnterOnce, ExitOnce } from './output';
var inView = require('in-view');
var InView = (function () {
    function InView(config, element, cd, enter, exit, enterOnce, exitOnce) {
        this.config = config;
        this.element = element;
        this.cd = cd;
        this.onEnter = new EventEmitter();
        this.onExit = new EventEmitter();
        this.onEnterOnce = new EventEmitter();
        this.onExitOnce = new EventEmitter();
        this.uid = uniqueId();
        this.hasEnterHandler = !!enter;
        this.hasExitHandler = !!exit;
        this.hasEnterOnceHandler = !!enterOnce;
        this.hasExitOnceHandler = !!exitOnce;
        this.invOnConfigChanges();
    }
    InView.prototype.ngAfterViewInit = function () {
        var _this = this;
        var inv = inView("#" + this.uid);
        if (this.hasEnterHandler) {
            inv.on('enter', function () {
                _this.onEnter.emit();
                _this.cd.detectChanges();
            });
        }
        if (this.hasExitHandler) {
            inv.on('exit', function () {
                _this.onExit.emit();
                _this.cd.detectChanges();
            });
        }
        if (this.hasEnterOnceHandler) {
            inv.once('enter', function () {
                _this.onEnterOnce.emit();
                _this.cd.detectChanges();
            });
        }
        if (this.hasExitOnceHandler) {
            inv.once('exit', function () {
                _this.onExitOnce.emit();
                _this.cd.detectChanges();
            });
        }
    };
    InView.prototype.is = function () {
        return inView.is(this.element.nativeElement);
    };
    InView.prototype.invOnConfigChanges = function () {
        inView.offset(this.config.get('offset'));
        inView.threshold(this.config.get('threshold'));
        inView.test(this.config.get('test'));
    };
    return InView;
}());
InView.decorators = [
    { type: Directive, args: [{
                selector: '[inView]',
                host: {
                    '[id]': 'uid',
                },
                exportAs: 'inView',
            },] },
];
/** @nocollapse */
InView.ctorParameters = function () { return [
    { type: InViewConfig, },
    { type: ElementRef, },
    { type: ChangeDetectorRef, },
    { type: Enter, decorators: [{ type: Optional },] },
    { type: Exit, decorators: [{ type: Optional },] },
    { type: EnterOnce, decorators: [{ type: Optional },] },
    { type: ExitOnce, decorators: [{ type: Optional },] },
]; };
InView.propDecorators = {
    'onEnter': [{ type: Output, args: ['enter',] },],
    'onExit': [{ type: Output, args: ['exit',] },],
    'onEnterOnce': [{ type: Output, args: ['enterOnce',] },],
    'onExitOnce': [{ type: Output, args: ['exitOnce',] },],
};
InView = __decorate([
    InViewConfigurable()
], InView);
export { InView };
;
//# sourceMappingURL=in-view.js.map