import { Injectable, EventEmitter, OpaqueToken, Inject } from '@angular/core';
export var INV_CONFIG = new OpaqueToken('INV_CONFIG');
var InViewConfig = (function () {
    function InViewConfig(config) {
        if (config === void 0) { config = null; }
        this._emitter = new EventEmitter();
        this.values = {
            threshold: 0,
            offset: 0,
        };
        this.values = Object.assign({}, this.values, config || {});
    }
    InViewConfig.prototype.update = function (config) {
        this.values = Object.assign({}, this.values, config || {});
        this._emitter.emit();
    };
    InViewConfig.prototype.get = function (key) {
        return this.values[key];
    };
    return InViewConfig;
}());
export { InViewConfig };
InViewConfig.decorators = [
    { type: Injectable },
];
/** @nocollapse */
InViewConfig.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: Inject, args: [INV_CONFIG,] },] },
]; };
// Intrenal decorator
export function InViewConfigurable(config) {
    if (config === void 0) { config = { changeDetectorProperty: 'cd' }; }
    return function (constructor) {
        var _a = constructor.prototype, ngOnInit = _a.ngOnInit, ngOnDestroy = _a.ngOnDestroy;
        constructor.prototype.ngOnInit = function () {
            var _this = this;
            var changeDetectorRef = this[config.changeDetectorProperty];
            if (!changeDetectorRef || !changeDetectorRef.markForCheck) {
                throw Error("InViewConfig: invalid ChangeDetectorRef at property \"" + config.changeDetectorProperty + "\"");
            }
            this.invConfigSubscription = this.config._emitter.subscribe(function () {
                if (_this.invOnConfigChanges) {
                    _this.invOnConfigChanges();
                }
                changeDetectorRef.markForCheck();
            });
            if (ngOnInit) {
                ngOnInit.call(this);
            }
        };
        constructor.prototype.ngOnDestroy = function () {
            if (this.invConfigSubscription) {
                this.invConfigSubscription.unsubscribe();
                this.invConfigSubscription = null;
            }
            if (ngOnDestroy) {
                ngOnDestroy.call(this);
            }
        };
    };
}
;
//# sourceMappingURL=config.js.map