{"version":3,"sources":["../../temp/inline/in-view.ts"],"names":[],"mappings":"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","file":"in-view.js","sourceRoot":"","sourcesContent":["import { Directive, Output, EventEmitter, ChangeDetectorRef, ElementRef, Optional } from '@angular/core';\nimport { uniqueId } from './util';\nimport { InViewConfigurable } from './config/config';\nimport { InViewConfig } from './config/config';\nimport { Enter, Exit, EnterOnce, ExitOnce } from './output';\n\nvar inView = require('in-view');\n\n\n@InViewConfigurable()\nexport class InView {\n\n   onEnter = new EventEmitter<any>();\n   onExit = new EventEmitter<any>();\n   onEnterOnce = new EventEmitter<any>();\n   onExitOnce = new EventEmitter<any>();\n\n  private uid = uniqueId();\n  private hasEnterHandler;\n  private hasExitHandler;\n  private hasEnterOnceHandler;\n  private hasExitOnceHandler;\n\n  constructor(private config: InViewConfig, private element: ElementRef,\n              private cd: ChangeDetectorRef,\n               enter: Enter,\n               exit: Exit,\n               enterOnce: EnterOnce,\n               exitOnce: ExitOnce) {\n    this.hasEnterHandler = !!enter;\n    this.hasExitHandler = !!exit;\n    this.hasEnterOnceHandler = !!enterOnce;\n    this.hasExitOnceHandler = !!exitOnce;\n    this.invOnConfigChanges();\n  }\n\n  ngAfterViewInit() {\n    const inv = inView(`#${this.uid}`);\n    if (this.hasEnterHandler) {\n      inv.on('enter', () => {\n        this.onEnter.emit();\n        this.cd.detectChanges();\n      });\n    }\n    if (this.hasExitHandler) {\n      inv.on('exit', () => {\n        this.onExit.emit();\n        this.cd.detectChanges();\n      });\n    }\n    if (this.hasEnterOnceHandler) {\n      inv.once('enter', () => {\n        this.onEnterOnce.emit();\n        this.cd.detectChanges();\n      });\n    }\n    if (this.hasExitOnceHandler) {\n      inv.once('exit', () => {\n        this.onExitOnce.emit();\n        this.cd.detectChanges();\n      });\n    }\n  }\n\n  is() {\n    return inView.is(this.element.nativeElement);\n  }\n\n  private invOnConfigChanges() {\n    inView.offset(this.config.get('offset'));\n    inView.threshold(this.config.get('threshold'));\n    inView.test(this.config.get('test'));\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[inView]',\n  host: {\n    '[id]': 'uid',\n  },\n  exportAs: 'inView',\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: InViewConfig, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: Enter, decorators: [{ type: Optional }, ]},\n{type: Exit, decorators: [{ type: Optional }, ]},\n{type: EnterOnce, decorators: [{ type: Optional }, ]},\n{type: ExitOnce, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'onEnter': [{ type: Output, args: ['enter', ] },],\n'onExit': [{ type: Output, args: ['exit', ] },],\n'onEnterOnce': [{ type: Output, args: ['enterOnce', ] },],\n'onExitOnce': [{ type: Output, args: ['exitOnce', ] },],\n};\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}